//------------------------------------------------------------------------------
// container.cpp - содержит функции обработки контейнера
//------------------------------------------------------------------------------

#include "container.h"

//------------------------------------------------------------------------------
// Инициализация контейнера
void Init(container& c) {
    c.len = 0;
}

//------------------------------------------------------------------------------
// Очистка контейнера от элементов (освобождение памяти)
void Clear(container& c) {
    for (int i = 0; i < c.len; i++) {
        delete c.cont[i];
    }
    c.len = 0;
}

//------------------------------------------------------------------------------
// Ввод содержимого контейнера из указанного потока
void In(container& c, FILE& ifst) {
    // while (!ifst.eof()) {
    while (!feof(&ifst)) {
        if ((c.cont[c.len] = In(ifst)) != 0) {
            c.len++;
        }
    }
}

//------------------------------------------------------------------------------
// Случайный ввод содержимого контейнера
void InRnd(container& c, int size) {
    while (c.len < size) {
        if ((c.cont[c.len] = InRnd()) != nullptr) {
            c.len++;
        }
    }
}

//------------------------------------------------------------------------------
// Вывод содержимого контейнера в указанный поток
void Out(container& c, FILE& ofst) {
    // ofst << "Container contains " << c.len << " elements." << endl;
    fprintf(&ofst, "%s%d%s", "Container contains ", c.len, " elements.\n");
    for (int i = 0; i < c.len; i++) {
        // ofst << i + 1 << ": ";
        fprintf(&ofst, "%d%s", i + 1,": ");
        Out(*(c.cont[i]), ofst);
    }
}

//------------------------------------------------------------------------------
// Вычисление среднего арифметического значения приведенных к действительному числу всех чисел в контейнере
double RealAverage(container& c) {
    double sum = 0.0;
    for (int i = 0; i < c.len; i++) {
        sum += Real(*(c.cont[i]));
    }
    return sum / c.len;
}

//------------------------------------------------------------------------------
// Удаление элементов контейнера, действительное значение которых меньше среднего.
void DeleteLowerThanAverage(container& c) {
    double aver = RealAverage(c);
    int counter = 0;
    for (int i = 0; i < c.len; i++) {
        if (Real(*(c.cont[i])) >= aver) {
            c.cont[counter] = c.cont[i];
            counter++;
        }
        else {
            delete c.cont[i];
        }
    }
    c.len = counter;
}
